package com.example.petHotel.user.mock;

import com.example.petHotel.user.domain.RefreshToken;
import com.example.petHotel.user.service.port.RefreshTokenRepository;

import java.util.*;
import java.util.concurrent.atomic.AtomicLong;

public class FakeRefreshTokenRepository implements RefreshTokenRepository {
    private final List<RefreshToken> data = new ArrayList<>();

    private final AtomicLong autoGeneratedId = new AtomicLong(0);


    @Override
    public Optional<RefreshToken> findByUserId(UUID userId) {
        return data.stream().filter(item -> item.getUserId().equals(userId)).findAny();
    }

    @Override
    public RefreshToken save(RefreshToken refreshToken) {
        if (refreshToken.getId() == null) {
            RefreshToken refreshToken1 = RefreshToken.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .token(refreshToken.getToken())
                    .userId(refreshToken.getUserId())
                    .build();
            data.add(refreshToken1);
            return refreshToken1;
        } else {
            data.removeIf(item -> Objects.equals(item.getUserId(), refreshToken.getUserId()));
            data.add(refreshToken);
            return refreshToken;
        }
    }

}
